//
//  DisplayDashboardView.swift
//  Lemi-App
//
//  Created by Xander Mercado on 3/19/20.
//  Copyright (c) 2020 Xander Mercado. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol DisplayDashboardViewProtocol: class {
    func showSearchPage()
}

class DisplayDashboardView: UIView {
    weak var delegate: DisplayDashboardViewProtocol?
    var viewModel = DisplayDashboardModel.ViewModel()

    let imageIcon: UIImageView = {
        let imageView = UIImageView()
        imageView.clipsToBounds = true
        imageView.image = UIImage(named: "gps-icon")?.withRenderingMode(.alwaysTemplate)
        imageView.tintColor = .green
        imageView.contentMode = .scaleAspectFit
        imageView.isUserInteractionEnabled = true
        imageView.translatesAutoresizingMaskIntoConstraints = false
        return imageView
    }()
    
    let label: UILabel = {
        let label = UILabel()
        label.text = "Tap to select a city"
        label.textColor = .black
        label.isUserInteractionEnabled = true
        label.translatesAutoresizingMaskIntoConstraints = false
        return label
    }()
    
    let selectedCityLabel: UILabel = {
        let label = UILabel()
        label.text = ""
        label.textColor = .black
        label.isUserInteractionEnabled = true
        label.translatesAutoresizingMaskIntoConstraints = false
        return label
    }()
    
    private func setupView() {
        let view = self
        
        view.addSubview(imageIcon)
        view.addConstraint(NSLayoutConstraint(
            item: imageIcon,
            attribute: .leading,
            relatedBy: .equal,
            toItem: view,
            attribute: .leading,
            multiplier: 1,
            constant: 32))
        view.addConstraint(NSLayoutConstraint(
            item: imageIcon,
            attribute: .top,
            relatedBy: .equal,
            toItem: view,
            attribute: .top,
            multiplier: 1,
            constant: 100))
        view.addConstraint(NSLayoutConstraint(
            item: imageIcon,
            attribute: .height,
            relatedBy: .equal,
            toItem: .none,
            attribute: .height,
            multiplier: 1,
            constant: 30))
        view.addConstraint(NSLayoutConstraint(
            item: imageIcon,
            attribute: .width,
            relatedBy: .equal,
            toItem: .none,
            attribute: .width,
            multiplier: 1,
            constant: 30))
        
        view.addSubview(label)
        view.addConstraint(NSLayoutConstraint(
            item: label,
            attribute: .leading,
            relatedBy: .equal,
            toItem: imageIcon,
            attribute: .trailing,
            multiplier: 1,
            constant: 6))
        view.addConstraint(NSLayoutConstraint(
            item: label,
            attribute: .top,
            relatedBy: .equal,
            toItem: imageIcon,
            attribute: .top,
            multiplier: 1,
            constant: 0))
        
        view.addSubview(selectedCityLabel)
        view.addConstraint(NSLayoutConstraint(
            item: selectedCityLabel,
            attribute: .leading,
            relatedBy: .equal,
            toItem: imageIcon,
            attribute: .trailing,
            multiplier: 1,
            constant: 6))
        view.addConstraint(NSLayoutConstraint(
            item: selectedCityLabel,
            attribute: .top,
            relatedBy: .equal,
            toItem: label,
            attribute: .bottom,
            multiplier: 1,
            constant: 24))
    }
    
    private func setupGesture() {
        imageIcon.addGestureRecognizer(UITapGestureRecognizer(target: self, action: #selector(handleSearchAction)))
        label.addGestureRecognizer(UITapGestureRecognizer(target: self, action: #selector(handleSearchAction)))
    }
    
    @objc func handleSearchAction() {
        self.delegate?.showSearchPage()
    }
    
    override init(frame: CGRect) {
        super.init(frame: frame)
        setupView()
        setupGesture()
    }
    
    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
}
