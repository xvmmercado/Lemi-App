//
//  SearchCitiesView.swift
//  Lemi-App
//
//  Created by Xander Mercado on 3/19/20.
//  Copyright (c) 2020 Xander Mercado. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol SearchCitiesViewProtocol: class {
    
}

class SearchCitiesView: UIView {
    weak var delegate: SearchCitiesViewProtocol?
    var requestModel = SearchCitiesModel.Request()
    var viewModel = SearchCitiesModel.ViewModel()
    
    let screenWidth = UIScreen.main.bounds.width
    
    lazy var searchBar: UISearchBar = UISearchBar(frame: CGRect(x: 0, y: 0, width: screenWidth - ( screenWidth / 4), height: 20))
    let searchController = UISearchController(searchResultsController: nil)
    
    lazy var myTable: UITableView = {
        let table = UITableView()
        table.contentInset = UIEdgeInsets(top: 0, left: 0, bottom: 0, right: 0)
        table.layoutMargins = UIEdgeInsets(top: -15, left: 0, bottom: 0, right: 0)
        table.separatorInset = UIEdgeInsets(top: -15, left: 0, bottom: 0, right: 0)
        table.sectionIndexBackgroundColor = UIColor.white

        table.isHidden = true
        table.sectionIndexColor = UIColor.white
        table.backgroundColor = UIColor.white
        table.translatesAutoresizingMaskIntoConstraints = false
        table.register(SearchCitiesTableViewCell.self, forCellReuseIdentifier: "cell")
        return table
    }()

    private func setupView() {
        addSubview(myTable)
        addConstraint(NSLayoutConstraint(
            item: myTable,
            attribute: .centerX,
            relatedBy: .equal,
            toItem: self,
            attribute: .centerX,
            multiplier: 1,
            constant: 0))
        addConstraint(NSLayoutConstraint(
            item: myTable,
            attribute: .top,
            relatedBy: .equal,
            toItem: self,
            attribute: .top,
            multiplier: 1,
            constant: 0))
        addConstraint(NSLayoutConstraint(
            item: myTable,
            attribute: .width,
            relatedBy: .equal,
            toItem: self,
            attribute: .width,
            multiplier: 1,
            constant: 0))
        if #available(iOS 11.0, *) {
            addConstraint(NSLayoutConstraint(
                item: myTable,
                attribute: .bottom,
                relatedBy: .equal,
                toItem: self.safeAreaLayoutGuide,
                attribute: .bottom,
                multiplier: 1,
                constant: 0))
        } else {
            // Fallback on earlier versions
            addConstraint(NSLayoutConstraint(
                item: myTable,
                attribute: .bottom,
                relatedBy: .equal,
                toItem: self,
                attribute: .bottom,
                multiplier: 1,
                constant: 0))
        }
    }
    
    private func setupGesture() {
        
    }
    
    @objc func hideKeyboard() {
        self.endEditing(true)
    }
    
    override init(frame: CGRect) {
        super.init(frame: frame)
        setupView()
        setupGesture()
    }
    
    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
}
